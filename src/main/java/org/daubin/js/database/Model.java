package org.daubin.js.database;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

/**
 * This interface is used like a mixin on the model classes generated by {@link EntityManagerFactoryBuilder#define(String, java.util.Map)}.
 * @author sdaubin
 */
public interface Model {
	
	String getTableName();

	default String help() {
		return "";
	}
	
	default String dump() {
		StringBuilder builder = new StringBuilder();
		builder.append(getTableName()).append('{');
		
		builder.append(Joiner.on(',').join(
				ImmutableSet.<Field>builder().add(getClass().getFields()).add(getClass().getDeclaredFields()).build().stream().
			    filter(f -> (f.getModifiers() & Modifier.STATIC) == 0).
			    filter(f -> (f.getModifiers() & Modifier.PUBLIC) == Modifier.PUBLIC).
				map(f -> {
					try {
						return f.getName() + ':' + f.get(this);
					} catch (Exception e) {
						return e.getMessage();
					}
				}).iterator()));
		
		//accounts{id:1,name:test}
		return builder.append('}').toString();
	}
}
